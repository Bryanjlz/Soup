using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Gacha : MonoBehaviour
{
    public GachaRate[] gachaRates;
    public GameObject gottenThing;
    public string gachaName;

    public Button low, med, high, roll;

    private GachaRate curGacha;

    private void Start() {
        gachaName = "Low";
        LoadGacha();
        ChangeGacha(gachaName);
    }

    private void Update() {
        if (curGacha.cost > PlayerStatistics.instance.money) {
            roll.interactable = false;
        } else {
            roll.interactable = true;
        }
    }

    public void ChangeGacha(string newName) {
        // Set gacha mame
        gachaName = newName;

        // Enable all buttons
        low.interactable = true;
        med.interactable = true;
        high.interactable = true;

        // Disable new gacha button
        if (gachaName.Equals("Low")) {
            low.interactable = false;
        } else if (gachaName.Equals("Medium")) {
            med.interactable = false;
        } else {
            high.interactable = false;
        }

        // Find the gacha
        foreach (GachaRate gacha in gachaRates) {
            if (gacha.name.Equals(gachaName)) {
                curGacha = gacha;
            }
        }

        
    }


    public void RollGacha () {

        int rand = PlayerStatistics.instance.rng.Next(100);
        int rate = 0;
        for (int i = 0; i < curGacha.rates.Length; i++) {
            rate += curGacha.rates[i];
            print(rate);
            if (rand < rate) {
                int rarity = i + 1;
                if (rarity == 6) {
                    rarity = 7;
                }
                print(rarity);
                Soup gotten = GetSoupWithRarity(rarity);
                PlayerStatistics.instance.AddSoup(gotten);
                gottenThing.gameObject.GetComponent<Image>().sprite = gotten.sprite;
                gottenThing.gameObject.GetComponent<CanMenuScript>().description = PlayerStatistics.instance.AutoGenerateDescription(gotten);
                break;
            }
        }

    }

    private Soup GetSoupWithRarity(int rarity) {
        Soup[] soups = PlayerStatistics.instance.allSoups;
        Soup result = null;
        while (result == null) {
            int rand = PlayerStatistics.instance.rng.Next(soups.Length);
            result = soups[rand];
            if (result.rarity != rarity) {
                result = null;
            }
        }
        return result;
    }

    private void LoadGacha () {
        gachaRates = Resources.LoadAll<GachaRate>("Gacha Rates");
    }

}
